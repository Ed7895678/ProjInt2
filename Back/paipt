const puppeteer = require('puppeteer');
const fs = require('fs-extra');
const path = require('path');

// Lista de empresas a serem pesquisadas
const empresas = [
    'COMANOR IMOBILIÁRIA',
    'Empresa B',
    'Empresa C',
    // Adicione mais nomes conforme necessário
];

// Função para pausar a execução por um determinado tempo (ms)
const delay = (time) => new Promise(resolve => setTimeout(resolve, time));

async function buscarReviews() {
    // Lançar o navegador
    const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();

    // Opcional: Configurar User-Agent para imitar um navegador real
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) ' +
                            'AppleWebKit/537.36 (KHTML, like Gecko) ' +
                            'Chrome/112.0.0.0 Safari/537.36');

    const resultadosFinal = [];

    try {
        for (const empresa of empresas) {
            console.log(`\nPesquisando empresa: ${empresa}`);

            // Navega para a página inicial do pai.pt
            await page.goto('https://www.pai.pt/', { waitUntil: 'networkidle2' });

            // Aguarda o campo de pesquisa estar disponível
            await page.waitForSelector('#search_query');

            // Seleciona todo o texto existente no campo de pesquisa e insere o nome da empresa
            await page.click('#search_query', { clickCount: 3 });
            await page.type('#search_query', empresa);

            // Clica no botão de pesquisa
            await Promise.all([
                page.click('input[type="submit"][name="commit"]'),
                page.waitForNavigation({ waitUntil: 'networkidle2' })
            ]);

            // Aguarda os resultados da pesquisa
            const resultadoSelector = 'a.card-link';
            const resultadosEncontrados = await page.$$(resultadoSelector);

            if (resultadosEncontrados.length > 0) {
                // Seleciona o primeiro resultado da pesquisa
                const linkEmpresa = await page.$eval(resultadoSelector, el => el.href).catch(() => null);

                if (linkEmpresa) {
                    console.log(`Encontrada página da empresa: ${linkEmpresa}`);

                    // Navega para a página da empresa
                    await page.goto(linkEmpresa, { waitUntil: 'networkidle2' });

                    // Verifica se a seção de reviews existe
                    const reviewsContainerSelector = '.reviews-container';
                    const existeReviews = await page.$(reviewsContainerSelector) !== null;

                    let resumoAvaliacoes = null;
                    let todasAvaliacoes = [];

                    if (existeReviews) {
                        // Aguarda a seção de reviews estar disponível
                        await page.waitForSelector(reviewsContainerSelector);

                        // Extrai a média de avaliações e o número total de avaliações
                        resumoAvaliacoes = await page.evaluate(() => {
                            const mediaElement = document.querySelector('.rating-review');
                            const totalElement = document.querySelector('.reviews-container .rating-grid .cell.small-3 p');
                            
                            const mediaEstrelas = mediaElement ? Array.from(mediaElement.querySelectorAll('.star')).reduce((acc, star) => {
                                if (star.classList.contains('filled')) acc += 1;
                                else if (star.classList.contains('half-filled')) acc += 0.5;
                                return acc;
                            }, 0) : 'N/A';

                            const totalAvaliacoes = totalElement ? totalElement.innerText.trim().split(' ')[0] : 'N/A';

                            return { mediaEstrelas, totalAvaliacoes };
                        });

                        // Função para extrair as reviews de uma página
                        const extrairReviews = async () => {
                            return await page.evaluate(() => {
                                const reviews = [];
                                const elementos = document.querySelectorAll('.review-container');

                                elementos.forEach(el => {
                                    // Autor da avaliação
                                    const autor = el.querySelector('.review-sub > strong')?.innerText.trim() || 'N/A';

                                    // Nota da avaliação (número de estrelas)
                                    const estrelas = el.querySelectorAll('.rating-review-small .star.filled').length +
                                                     (el.querySelectorAll('.rating-review-small .star.half-filled').length * 0.5);

                                    // Conteúdo da avaliação
                                    const conteudo = el.querySelector('.review-content')?.innerText.trim() || 'N/A';

                                    // Data da avaliação
                                    const data = el.querySelector('.review-meta span.ml-5')?.innerText.trim() || 'N/A';

                                    reviews.push({ autor, estrelas, conteudo, data });
                                });

                                return reviews;
                            });
                        };

                        // Extrai as reviews da primeira página
                        todasAvaliacoes = await extrairReviews();
                        console.log(`Avaliações encontradas na primeira página: ${todasAvaliacoes.length}`);

                        // Verifica se há mais páginas de avaliações
                        let proximaPagina = true;
                        let numeroPagina = 1;

                        while (proximaPagina) {
                            // Tenta encontrar o botão de "Seguinte ›"
                            const botaoProxima = await page.$('a.next[rel="next"]');

                            if (botaoProxima) {
                                numeroPagina += 1;
                                console.log(`Navegando para a página de avaliações: ${numeroPagina}`);

                                // Clica no botão de próxima página e aguarda a navegação
                                await Promise.all([
                                    botaoProxima.click(),
                                    page.waitForNavigation({ waitUntil: 'networkidle2' })
                                ]);

                                // Aguarda as reviews estarem disponíveis na nova página
                                await page.waitForSelector(reviewsContainerSelector);

                                // Extrai as reviews da nova página
                                const reviewsPagina = await extrairReviews();
                                console.log(`Avaliações encontradas na página ${numeroPagina}: ${reviewsPagina.length}`);

                                // Adiciona as novas avaliações ao array total
                                todasAvaliacoes = todasAvaliacoes.concat(reviewsPagina);

                                // Opcional: Pausa entre as requisições para evitar sobrecarga
                                await delay(1000); // Pausa de 1 segundo
                            } else {
                                proximaPagina = false; // Não há mais páginas
                            }
                        }

                    } else {
                        console.log(`Nenhuma avaliação encontrada para a empresa: ${empresa}`);
                    }

                    // Adiciona os resultados para a empresa atual
                    resultadosFinal.push({
                        empresa,
                        link: linkEmpresa,
                        resumoAvaliacoes,
                        avaliacoes: todasAvaliacoes
                    });

                    // Opcional: Pausa entre as pesquisas para evitar sobrecarga
                    await delay(2000); // Pausa de 2 segundos
                } else {
                    console.log(`Nenhuma página encontrada para a empresa: ${empresa}`);
                    resultadosFinal.push({
                        empresa,
                        link: null,
                        resumoAvaliacoes: null,
                        avaliacoes: []
                    });
                }
            } else {
                console.log(`Nenhum resultado encontrado para a empresa: ${empresa}`);
                resultadosFinal.push({
                    empresa,
                    link: null,
                    resumoAvaliacoes: null,
                    avaliacoes: []
                });
            }
        }

        // Define o caminho completo para salvar o arquivo JSON
        const caminhoArquivo = path.join(__dirname, 'resultados_reviews.json');

        // Salva os resultados em um arquivo JSON
        await fs.writeJson(caminhoArquivo, resultadosFinal, { spaces: 2 });
        console.log(`\nDados salvos em "${caminhoArquivo}"`);
    } catch (error) {
        console.error('Erro durante a execução:', error);
    } finally {
        await browser.close();
    }
}

// Executa a função principal
buscarReviews();
